import { JournalEntry, MoodType, DailyPrompt, MoodTrend } from '@/types/journal';
import { format } from 'date-fns';
import { generateGeminiResponse } from './apiUtils';

// Mock data for demonstration
const mockJournalEntries: JournalEntry[] = [
  {
    id: '1',
    content: 'Today was a productive day. I managed to complete my project ahead of schedule and even had time for a quick workout. Feeling accomplished!',
    date: new Date(2023, 3, 15),
    mood: 'happy',
    summary: 'Productive day with project completion and exercise.',
    aiReflection: 'Your sense of accomplishment is well-deserved. Consider building on this momentum tomorrow.',
    media: []
  },
  {
    id: '2',
    content: 'Feeling a bit tired today. Work was okay, but nothing special. I should try to get more sleep tonight.',
    date: new Date(2023, 3, 16),
    mood: 'neutral',
    summary: 'Average day. Feeling tired.',
    aiReflection: 'Rest is important. A good night\'s sleep might help you feel more energized tomorrow.',
    media: []
  },
  {
    id: '3',
    content: 'Had a deep conversation with an old friend today. It made me think about where I\'m heading in life and what truly matters to me.',
    date: new Date(2023, 3, 17),
    mood: 'reflective',
    summary: 'Deep conversation leading to life reflections.',
    aiReflection: 'These moments of reflection can be valuable guideposts. Consider journaling about your core values soon.',
    media: []
  }
];

const mockPrompts: DailyPrompt[] = [
  {
    id: '1',
    text: 'What made you smile today?',
    date: new Date(2023, 3, 15)
  },
  {
    id: '2',
    text: 'Describe a small moment that caught your attention today.',
    date: new Date(2023, 3, 16)
  },
  {
    id: '3',
    text: 'What\'s something you\'re looking forward to tomorrow?',
    date: new Date(2023, 3, 17)
  },
  {
    id: '4',
    text: 'If today was a color, what would it be and why?',
    date: new Date(2023, 3, 18)
  },
  {
    id: '5',
    text: 'What\'s one thing you learned or realized today?',
    date: new Date()
  }
];

// Functions to get journal entries
export const getAllJournalEntries = (): JournalEntry[] => {
  return [...mockJournalEntries].sort((a, b) => b.date.getTime() - a.date.getTime());
};

export const getJournalEntryById = (id: string): JournalEntry | undefined => {
  return mockJournalEntries.find(entry => entry.id === id);
};

export const getJournalEntriesByDate = (date: Date): JournalEntry[] => {
  return mockJournalEntries.filter(entry => 
    format(entry.date, 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd')
  );
};

// Function to add a new journal entry
export const addJournalEntry = (
  content: string, 
  mood: MoodType, 
  mediaFiles?: File[]
): JournalEntry => {
  // In a real app, you would upload the media files to storage and get URLs
  const mediaUrls: string[] = mediaFiles 
    ? mediaFiles.map(file => URL.createObjectURL(file)) 
    : [];

  const newEntry: JournalEntry = {
    id: (mockJournalEntries.length + 1).toString(),
    content,
    date: new Date(),
    mood,
    // These would normally be generated by the AI
    summary: content.length > 50 ? content.substring(0, 50) + '...' : content,
    aiReflection: 'This is a placeholder for AI reflection.',
    media: mediaUrls,
    isPublished: false
  };
  
  mockJournalEntries.push(newEntry);
  return newEntry;
};

// Function to share an entry as a blog post
export const shareEntryAsBlog = (entryId: string): JournalEntry | null => {
  const entry = mockJournalEntries.find(e => e.id === entryId);
  
  if (!entry) return null;
  
  entry.isPublished = true;
  return entry;
};

// Function to get the daily prompt
export const getDailyPrompt = (): DailyPrompt => {
  const today = format(new Date(), 'yyyy-MM-dd');
  
  const todayPrompt = mockPrompts.find(prompt => 
    format(prompt.date, 'yyyy-MM-dd') === today
  );
  
  if (todayPrompt) {
    return todayPrompt;
  }
  
  // Return the latest prompt if no prompt for today
  return mockPrompts[mockPrompts.length - 1];
};

// Function to get mood trends
export const getMoodTrends = (): MoodTrend[] => {
  const total = mockJournalEntries.length;
  const moodCounts = mockJournalEntries.reduce((acc, entry) => {
    acc[entry.mood] = (acc[entry.mood] || 0) + 1;
    return acc;
  }, {} as Record<MoodType, number>);
  
  const trends: MoodTrend[] = Object.entries(moodCounts).map(([mood, count]) => ({
    mood: mood as MoodType,
    count,
    percentage: Math.round((count / total) * 100)
  }));
  
  return trends;
};

// Update AI functions
export const generateAISummary = async (content: string): Promise<string> => {
  try {
    const prompt = `Please summarize the following journal entry in a concise way (30 words or less):\n\n${content}`;
    return await generateGeminiResponse(prompt);
  } catch (error) {
    console.error('Error generating AI summary:', error);
    return content.length > 100 
      ? content.substring(0, 100) + '...' 
      : content;
  }
};

export const generateAIReflection = async (content: string, mood: MoodType): Promise<string> => {
  try {
    const prompt = `Please provide a thoughtful, empathetic reflection (2-3 sentences) on this journal entry. The person's mood is ${mood}.\n\n${content}`;
    return await generateGeminiResponse(prompt);
  } catch (error) {
    console.error('Error generating AI reflection:', error);
    const reflections = {
      'happy': 'It\'s great to see you\'re feeling positive. Keep this momentum going!',
      'neutral': 'Days like these are important too. What small thing could make tomorrow a bit brighter?',
      'reflective': 'Taking time to reflect shows great self-awareness. What insights will you carry forward?',
      'sad': 'It\'s okay to have difficult days. Be gentle with yourself and remember that emotions are temporary.'
    };
    
    return reflections[mood];
  }
};

// Placeholder for speech-to-text
export const speechToText = async (): Promise<string> => {
  // In a real implementation, this would use the Web Speech API or call Google Cloud Speech-to-Text
  return new Promise(resolve => {
    setTimeout(() => {
      resolve("This is a placeholder for speech-to-text conversion. In a real implementation, this would be your spoken words transcribed to text.");
    }, 1000);
  });
};
